
//Go the test database using the following command
use('test');


db.orders.deleteMany({})

//Use insertMany() to create a collection orders and populate the collection
db.orders.insertMany( [
 { cust_id: "A123", amount: 500, status: "A" },
 { cust_id: "A123", amount: 250, status: "A" },
 { cust_id: "B212", amount: 200, status: "A" },
 { cust_id: "A123", amount: 300, status: "D" }
] );

// -----------$match stage act as a filter or where clause
db.orders.aggregate(
    {$match : {status: "A"}}
);

// using two filter 
db.orders.aggregate(
    {$match : {cust_id : "A123", status: "A"}}  
);

// using or condition inside match
db.orders.aggregate(
    {$match : {$or : [ {amount: {$gte: 300}}, { status : "D"} ]}}  
);

//-------------$group stage - act as a SQL group
db.orders.aggregate(
    {$group : {_id : "$cust_id", total: { $sum: "$amount"}}}  
);

//Aggregation pipline - [] is optional 
db.orders.aggregate ([ 
{ $match : { status : "A" } },
{ $group: { _id: "$cust_id", total: { $sum: "$amount" } } }
 ]);

// $count function -

db.orders.aggregate([
    {$match : {status:"A"}},
    {$group : {_id:null, count : {$sum: 1}}}
])

//In MongoDB 5.0, we can use $count in $group stage to get the number of documents in a
//group directly. We can rewrite the above command as follows


db.orders.aggregate([
    {$match : {status:"A"}},
    {$group : {_id:null, count : {$count: {}}}}
])

db.orders.aggregate ( [
 { $group: { _id: "$status", item_count: { $count: { } } } }
] );


//$sort function

db.orders.aggregate([
    { $match : {status: "A"}},
    { $group : { _id: "$cust_id", total: {$sum: "$amount"}} },
    { $sort : {_id : 1}}
])

// use 1 to make it ascending and -1 to make it descending

// $min , $max, $avg

db.orders.find({})

db.orders.aggregate([
    { $match: {status: "A"}},
    { $group : {_id: null, avg_amount: {$avg: "$amount"}}}
])

db.orders.aggregate([
    { $match: {status: "A"}},
    { $group : {_id: "$cust_id", avg_amount: {$avg: "$amount"}}}
])

db.orders.aggregate([
    { $match: {status: "A"}},
    { $group : {_id: null, avg_amount: {$min: "$amount"}}}
])

db.orders.aggregate([
    { $match: {status: "A"}},
    { $group : {_id: null, avg_amount: {$max: "$amount"}}}
])


// $unwind operator
db.inventory2.deleteMany({})

db.inventory.insertOne( { "_id" : 1, "item" : "ABC1", sizes: [ "S", "M", "L"] } )

//The following aggregation uses the $unwind stage to output a document for each element
//in the sizes array:
db.inventory.aggregate([
    {$unwind : {path:"$sizes"}}
])

db.inventory2.insertMany( [
{ "_id" : 1, "item" : "ABC", price: NumberDecimal("80"), "sizes" : [ "S", "M", "L" ] },
{ "_id" : 2, "item" : "EFG", price: NumberDecimal("120"), "sizes" : [ ] },
{ "_id" : 3, "item" : "IJK", price: NumberDecimal("160"), "sizes" : "M" },
{ "_id" : 4, "item" : "LMN" , price: NumberDecimal("10") },
{ "_id" : 5, "item" : "XYZ", price: NumberDecimal("5.75"), "sizes" : null }
] );

db.inventory2.aggregate([
    {$unwind: "$sizes"}
])

db.inventory2.aggregate([
    {$unwind: {path: "$sizes", preserveNullAndEmptyArrays: true}}
])

db.inventory2.aggregate([
    {$unwind: {path: "$sizes", preserveNullAndEmptyArrays: true, includeArrayIndex: "arrayIndex"}}
])

//Group by Unwound Values

db.inventory2.aggregate([
    {$unwind : {path: "$sizes", preserveNullAndEmptyArrays: true}},
    {$group : {_id: "$sizes", average_price: {$avg: "$price"}}},
    {$sort : {"average_price": -1}},
    {$project : {"Size": "$_id", _id : 0, average_price: "$average_price"}}
])

db.inventory2.aggregate([
    {$unwind : {path: "$sizes"}},
    {$group : {_id: "$sizes", average_price: {$avg: "$price"}}},
    {$sort : {"average_price": -1}},
    {$project : {"Size": "$_id", _id : 0, average_price: "$average_price"}}
])


//Unwind Embedded Arrays

db.sales.deleteMany({})


db.sales.insertMany([
{
_id: "1",
"items" : [
{
"name" : "pens",
"tags" : [ "writing", "office", "school", "stationary" ],
"price" : NumberDecimal("12.00"),
"quantity" : NumberInt("5")
},
{
"name" : "envelopes",
"tags" : [ "stationary", "office" ],
"price" : NumberDecimal("1.95"),
"quantity" : NumberInt("8")
}
]
},
{
_id: "2",
"items" : [
{
"name" : "laptop",
"tags" : [ "office", "electronics" ],
"price" : NumberDecimal("800.00"),
"quantity" : NumberInt("1")
},
{
"name" : "notepad",
"tags" : [ "stationary", "school" ],
"price" : NumberDecimal("14.95"),
"quantity" : NumberInt("3")
}
]
}
] )

//The following operation groups the items sold by their tags and calculates the total sales
//amount per each tag.

db.sales.aggregate([
    { $unwind : "$items"},
    { $unwind : "$items.tags"},
    { $group : {_id: "$items.tags", }}
])

