//use test database
use('test');

// Use the following command to delete all the documents in the inventory collection
db.inventory.deleteMany( {} )

//Use insertMany() to populate the collection
db.inventory.insertMany( [
 { item: "canvas", qty: 100, size: { h: 28, w: 35.5, uom: "cm" }, status: "A" },
 { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
 { item: "mat", qty: 85, size: { h: 27.9, w: 35.5, uom: "cm" }, status: "A" },
 { item: "mousepad", qty: 25, size: { h: 19, w: 22.85, uom: "cm" }, status: "P" },
 { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
 { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
 { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
 { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
 { item: "sketchbook", qty: 80, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
 { item: "sketch pad", qty: 95, size: { h: 22.85, w: 30.5, uom: "cm" }, status: "A" }
] );

//Ascending/Descending sort
db.inventory.find({}).sort({ qty:1 , item: -1})   // for ascending use 1 and for descending use -1


//Query on embedded/ nested documents
db.inventory.find({size : {h:14 , w:21, uom: "cm"}})    //use exact position of keys
// ---- This will not work
db.inventory.find({size : { w:21, h:14, uom: "cm"}})   


//Query on nested fields
db.inventory.find({"size.uom": "in"})
db.inventory.find({"size.h": {$gt:20} })

db.inventory.find({ "size.h": {$lt:15}, "size.uom":"in", status:"D" })
db.inventory.find({ $or: [ {"size.h": {$lt:15}}, { "size.uom":"in" }, { status:"D" } ]})


//          -- Query an Array

//Delete the documents in the collection first
db.inventory.deleteMany( {} )

//Populate the collection using the following documents
db.inventory.insertMany([
 { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
 { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
 { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
 { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
 { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
] );

//Match an array 
db.inventory.find( {tags: ['red', 'blank']} )      // matching exact array
db.inventory.find( {tags : ["blank", "red"] })      // matching exact array

db.inventory.find( {tags: { $all :['red', 'blank']}} )      // matching in any order and atleast these elements should be present in array
db.inventory.find( {tags : ["blank", "red"] })      


//Query an array for on element
db.inventory.find( { tags: "red" } )
db.inventory.find( {dim_cm:{$gt:25} })
db.inventory.find( {dim_cm:{$gt:15} })

// one element can satisfy the greater than 15 condition
// and another element can satisfy the less than 20 condition, or a single
// element can satisfy both
db.inventory.find( {dim_cm:{$gt:15, $lt:20} })

//Use $elemMatch operator to specify multiple criteria on the elements
// of an array such that at least one array element satisfies all the
// specified criteria
db.inventory.find( { dim_cm: { $elemMatch: { $gt: 15, $lt: 20 } } } )

// Remember that dim_cm is an array. Try the following
db.inventory.find( {"dim_cm.1" : { $gt: 15}} )
db.inventory.find( {"dim_cm.0" : { $gt: 15}} )

//Array Length
db.inventory.find( {tags: {$size : 3}} )

// Query for a document nested in an array
db.inventory.deleteMany( {} )

//Populate the collection using the following documents
db.inventory.insertMany( [
 { item: "journal", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
 { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
 { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
 { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
 { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
] );

//Try the following commands. Whatâ€™s the difference?
db.inventory.find( { instock: { warehouse: "A", qty: 5 } } )
db.inventory.find( { instock: { qty: 5, warehouse: "A" } } )


//Query on a field in an array of documents
db.inventory.find( { "instock.qty": { $lte: 20 } } )
db.inventory.find( { "instock.0.qty": { $lte: 20 } } )
db.inventory.find( { "instock.1.qty": { $lte: 20 } } )

//Specify multiple conditions on one field
db.inventory.find( { "instock.qty":5 , "instock.warehouse":"A" } )   // return matching warehouse and qty
db.inventory.find( { instock : { $elemMatch : { qty: 5 , warehouse: "A" } } } )

db.inventory.find( { "instock.qty": { $gt: 10, $lte: 20 } } )
db.inventory.find( { instock: { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } )

//           -----  Query for Null or Missing Fields

db.inventory.deleteMany( {} )


// insert these record
db.inventory.insertMany([
 { _id: 1, item: null },
 { _id: 2 }
])

db.inventory.find( { item: null  } )        // contain the item field whose value is null or that do not contain the item field
db.inventory.find( { item: { $type: 10 } } )        //matches only documents that contain the item field whose value is null;
db.inventory.find( { item: { $exists : false}} )        //query matches documents that do not contain the item field


//              -----  Project Fields to Return from Query

//Delete the documents in the collection first
db.inventory.deleteMany( {} )

//Populate the collection
db.inventory.insertMany( [
 { item: "journal", status: "A", size: { h: 14, w: 21, uom: "cm" }, instock: [ { warehouse:
"A", qty: 5 } ] },
 { item: "notebook", status: "A", size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse:
"C", qty: 5 } ] },
 { item: "paper", status: "D", size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "A",
qty: 60 } ] },
 { item: "planner", status: "D", size: { h: 22.85, w: 30, uom: "cm" }, instock: [ {
warehouse: "A", qty: 40 } ] },
 { item: "postcard", status: "A", size: { h: 10, w: 15.25, uom: "cm" }, instock: [ {
warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
] );

//A projection can explicitly include several fields by setting the <field> to 1 in the
projection document (_id will be displayed by default)
db.inventory.find( { status: "A" }, { item: 1, status: 1 } )
db.inventory.find( { status: "A" }, { item: 0, status: 1 } )

//You can remove the _id field from the display
db.inventory.find( { status: "A" }, { item: 1, status: 1, _id: 0 } )

//Exclude the specific fields
db.inventory.find( { status:"A" }, { status:0, instock:0 } )

//Return/exclude specific fields in embedded documents
db.inventory.find( { status: "A" }, { item: 1, status: 1, "size.uom": 1 } )
db.inventory.find( { status: "A" }, { "size.uom": 0 })
db.inventory.find( { status: "A" }, { "instock.warehouse": 0 } )

//Projection on embedded documents in an array
db.inventory.find( { status: "A" }, { item: 1, status: 1, instock: 1 } )
db.inventory.find( { status: "A" }, { item: 1, status: 1, "instock.warehouse": 1 } )
db.inventory.find( { status: "A" }, { item: 1, status: 1, "instock.qty": 1 } )

// This will not work
db.inventory.find( { item: 1 } )            // because it will match for item : 1 which is not present in collection

//This will work
db.inventory.find( { }, { item: 1 } ) 